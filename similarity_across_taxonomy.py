# -*- coding: utf-8 -*-
"""similarity_across_taxonomy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jlkhaY20e6cwrreTbYv32Wo4bxfuMVHJ
"""

import json
import re
import numpy as np
import openai
import os
from google.colab import userdata
!pip install openai==0.28
from google.colab import userdata

os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI_API_KEY')

def extract_json_from_text(text):
    """
    Extracts the JSON string by finding the first '{' and the last '}' in the text.
    """
    start = text.find("{")
    end = text.rfind("}")
    if start == -1 or end == -1:
        raise ValueError("No JSON block found in the text.")
    return text[start:end+1]

def extract_labels(data, labels=None):
    """
    Recursively extracts 'label' values from the JSON structure.
    """
    if labels is None:
        labels = []

    if isinstance(data, dict):
        if "label" in data:
            labels.append(data["label"])
        # Recurse over all values in the dictionary.
        for key, value in data.items():
            if key != "label":
                extract_labels(value, labels)
    elif isinstance(data, list):
        for item in data:
            extract_labels(item, labels)
    return labels

def get_embedding(text):
    """
    Uses OpenAI's embedding API to obtain an embedding for the given text.
    """
    response = openai.Embedding.create(
        input=text,
        model="text-embedding-ada-002"
    )
    embedding = response['data'][0]['embedding']
    return np.array(embedding)

def cosine_similarity(vec1, vec2):
    """
    Computes cosine similarity between two vectors.
    """
    return np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))

def main():
    # Read and extract JSON from taxonomy7.txt
    with open("/content/taxonomy7.txt", "r", encoding="utf-8") as f:
        taxonomy7_text = f.read()
    taxonomy7_json_str = extract_json_from_text(taxonomy7_text)
    taxonomy7_data = json.loads(taxonomy7_json_str)

    # Load gpt_5.txt (assumed to be a standard JSON file)
    with open("/content/gpt_5.txt", "r", encoding="utf-8") as f:
        gpt5_data = json.load(f)

    # Extract labels from both JSON structures
    labels_taxonomy7 = extract_labels(taxonomy7_data)
    labels_gpt5 = extract_labels(gpt5_data)

    print("Labels in taxonomy7.txt:")
    print(labels_taxonomy7)
    print("\nLabels in gpt_5.txt:")
    print(labels_gpt5)

    # Obtain embeddings for each label using OpenAI's API
    embeddings_taxonomy7 = {label: get_embedding(label) for label in labels_taxonomy7}
    embeddings_gpt5 = {label: get_embedding(label) for label in labels_gpt5}

    # Compare each label pair using cosine similarity
    threshold = 0.8  # Adjust threshold as needed
    similar_labels = {}
    for label1, emb1 in embeddings_taxonomy7.items():
        for label2, emb2 in embeddings_gpt5.items():
            cos_sim = cosine_similarity(emb1, emb2)
            if cos_sim >= threshold:
                similar_labels.setdefault(label1, []).append((label2, cos_sim))

    output_lines = []
    output_lines.append(f"Similar labels (cosine similarity threshold >= {threshold:.2f}):\n")
    for label, matches in similar_labels.items():
        for match, cos_sim in matches:
            line = f'"{label}" <--> "{match}" with cosine similarity: {cos_sim:.2f}'
            output_lines.append(line)

    # Write the results to a file
    with open("similarities_gpt5.txt", "w", encoding="utf-8") as f:
        for line in output_lines:
            f.write(line + "\n")

    print("\nSimilarity results saved to similarities_gpt5.txt")

if __name__ == "__main__":
    main()

